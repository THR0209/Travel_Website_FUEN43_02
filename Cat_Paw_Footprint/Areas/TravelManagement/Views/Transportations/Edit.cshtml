@model Cat_Paw_Footprint.Areas.TravelManagement.ViewModel.TransportationsViewModel

@{
    ViewData["Title"] = "Edit";
}

<h1>修改</h1>

<h4>交通資訊</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="TransportID" />
            <div class="form-group">
                <label asp-for="TransportName" class="control-label"></label>
                <input asp-for="TransportName" class="form-control" />
                <span asp-validation-for="TransportName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TransportDesc" class="control-label"></label>
                <input asp-for="TransportDesc" class="form-control" />
                <span asp-validation-for="TransportDesc" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TransportPrice" class="control-label"></label>
                <input asp-for="TransportPrice" class="form-control" />
                <span asp-validation-for="TransportPrice" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Rating" class="control-label"></label>
                <input asp-for="Rating" class="form-control" />
                <span asp-validation-for="Rating" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Views" class="control-label"></label>
                <input asp-for="Views" class="form-control" />
                <span asp-validation-for="Views" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TransportCode" class="control-label"></label>
                <input asp-for="TransportCode" class="form-control" />
                <span asp-validation-for="TransportCode" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="IsActive" class="control-label"></label>
                <select asp-for="IsActive" class="form-control">
                    <option value="">請選擇</option>
                    <option value="true">啟用</option>
                    <option value="false">停用</option>
                </select>
                <span asp-validation-for="IsActive" class="text-danger"></span>
            </div>

            <!-- 多選關鍵字 -->
            <div class="form-group">
                <label>關鍵字</label>
                <select id="keywordSelect" class="form-control" asp-items="ViewBag.Keywords">
                    <option value="">請選擇</option>
                </select>

                <!-- 顯示已選關鍵字的區域 -->
                <label>已選關鍵字</label>
                <div id="selectedKeywords" style="margin-top:10px;">
                    @if (Model.KeywordID != null && Model.KeywordNames != null)
                    {
                        var keywordPairs = Model.KeywordID.Zip(Model.KeywordNames, (id, name) => new { Id = id, Name = name });
                        foreach (var kw in keywordPairs)
                        {
                            <span class="badge bg-primary m-1" data-id="@kw.Id">
                                @kw.Name
                                <button type="button" class="btn-close btn-sm text-white ms-2" onclick="removeKeyword(@kw.Id)"></button>
                            </span>
                        }
                    }
                </div>

                <!-- ✅ 隱藏欄位容器 (這裡會動態放多個 hidden input) -->
                <div id="KeywordIDsContainer"></div>
            </div>

            <!-- 現有圖片 (含刪除按鈕) -->
            <div class="form-group">
                <label>現有圖片</label>
                <div>
                    @if (Model.PictureBase64 != null && Model.PictureBase64.Any())
                    {
                        for (int i = 0; i < Model.PictureBase64.Count; i++)
                        {
                            <div id="pic-@Model.PictureIds[i]"
                                 style="display:inline-block; margin:10px; position:relative;">
                                <img src="@Model.PictureBase64[i]" style="width:120px; height:auto;" />
                                <button type="button" class="btn btn-sm btn-danger"
                                        style="position:absolute; top:0; right:0;"
                                        onclick="markImageForDelete(@Model.PictureIds[i])">
                                    X
                                </button>
                            </div>
                        }
                    }
                    <!-- ✅ 新的隱藏欄位容器 (動態產生) -->
                    <div id="DeletedPictureIdsContainer"></div>
                </div>
            </div>

            <!-- 上傳新圖片 -->
            <div class="form-group">
                <label asp-for="Picture"></label>
                <input asp-for="Picture" type="file" class="form-control" multiple onchange="previewImages(event)" />
                <span asp-validation-for="Picture" class="text-danger"></span>

                <!-- 預覽區 -->
                <div id="preview" style="margin-top:10px; display:flex; flex-wrap:wrap;"></div>

            </div>

            <div class="form-group">
                <input type="submit" value="確認" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">返回</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        //圖片
        // 存放暫存的檔案 (用來過濾哪些要送到後端)
        let selectedFiles = [];

        // 預覽上傳的圖片
        function previewImages(event) {
            const files = event.target.files;
            const preview = document.getElementById("preview");
            preview.innerHTML = ""; // 清空舊預覽
            selectedFiles = [];     // 清空舊選擇

            Array.from(files).forEach((file, index) => {
                if (file.type.startsWith("image/")) {
                    selectedFiles.push(file); // 存進陣列

                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const wrapper = document.createElement("div");
                        wrapper.id = "new-pic-" + index;
                        wrapper.style.position = "relative";
                        wrapper.style.margin = "5px";

                        const img = document.createElement("img");
                        img.src = e.target.result;
                        img.style.width = "120px";
                        img.style.border = "1px solid #ccc";
                        img.style.borderRadius = "8px";

                        const btn = document.createElement("button");
                        btn.innerText = "X";
                        btn.type = "button";
                        btn.className = "btn btn-sm btn-danger";
                        btn.style.position = "absolute";
                        btn.style.top = "0";
                        btn.style.right = "0";
                        btn.onclick = function() {
                            removeNewImage(index);
                        };

                        wrapper.appendChild(img);
                        wrapper.appendChild(btn);
                        preview.appendChild(wrapper);
                    };
                    reader.readAsDataURL(file);
                }
            });

            updateInputFiles(event.target);
        }

        // 刪除暫存的新圖片
        function removeNewImage(index) {
            selectedFiles.splice(index, 1); // 移除陣列中的檔案

            const elem = document.getElementById("new-pic-" + index);
            if (elem) elem.remove();

            const input = document.querySelector("input[type='file'][name='Picture']");
            updateInputFiles(input);
        }

        // 重建 input.files，確保刪掉的檔案不會送到後端
        function updateInputFiles(input) {
            const dataTransfer = new DataTransfer();
            selectedFiles.forEach(file => dataTransfer.items.add(file));
            input.files = dataTransfer.files;
        }

        // 記錄刪除 ID，只刪 DOM (不直接呼叫後端)
        let deletedIds = [];

        function markImageForDelete(picId) {
            if (!deletedIds.includes(picId)) {
                deletedIds.push(picId);
            }

            // ✅ 重新建立 hidden inputs
            let container = document.getElementById("DeletedPictureIdsContainer");
            container.innerHTML = "";
            deletedIds.forEach(id => {
                const input = document.createElement("input");
                input.type = "hidden";
                input.name = "DeletedPictureIds";
                input.value = id;
                container.appendChild(input);
            });

            // 移除 DOM
            let picDiv = document.getElementById("pic-" + picId);
            if (picDiv) picDiv.remove();
        }

        //關鍵字
        // 關鍵字 (維持原本的多選邏輯)
        function updateHiddenField() {
            const hiddenContainer = document.getElementById("KeywordIDsContainer");
            hiddenContainer.innerHTML = "";

            const ids = Array.from(document.querySelectorAll("#selectedKeywords span"))
                            .map(span => span.getAttribute("data-id"));

            ids.forEach(id => {
                const input = document.createElement("input");
                input.type = "hidden";
                input.name = "KeywordID";
                input.value = id;
                hiddenContainer.appendChild(input);
            });
        }

        // ✅ 選取關鍵字時觸發
        document.getElementById("keywordSelect").addEventListener("change", function () {
            const selectedId = this.value;
            const selectedText = this.options[this.selectedIndex].text;

            if (!selectedId) return;

            if (document.querySelector(`#selectedKeywords span[data-id="${selectedId}"]`)) {
                alert("此關鍵字已選取");
                return;
            }

            const span = document.createElement("span");
            span.className = "badge bg-primary m-1";
            span.setAttribute("data-id", selectedId);
            span.innerHTML = `${selectedText} <button type="button" class="btn-close btn-sm text-white ms-2" onclick="removeKeyword(${selectedId})"></button>`;

            document.getElementById("selectedKeywords").appendChild(span);

            updateHiddenField();
        });

        // ✅ 移除已選關鍵字
        function removeKeyword(id) {
            const elem = document.querySelector(`#selectedKeywords span[data-id="${id}"]`);
            if (elem) elem.remove();
            updateHiddenField();
        }

        // ✅ 頁面載入時同步一次 (確保 Model 初始資料能正確存回去)
        document.addEventListener("DOMContentLoaded", updateHiddenField);
    </script>
}
