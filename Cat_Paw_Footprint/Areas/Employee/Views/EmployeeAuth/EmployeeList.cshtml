@model IEnumerable<Cat_Paw_Footprint.Areas.Employee.ViewModel.EmployeeViewModel>
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    var roles = ViewBag.Roles as IEnumerable<SelectListItem> ?? Enumerable.Empty<SelectListItem>();
}
<h2 class="mb-3">員工管理</h2>
<div class="mb-3">
    <button type="button" class="btn btn-success" id="btn-save-all">全部儲存</button>
</div>
<div class="table-responsive">
    <table class="table table-striped align-middle" id="emp-table">
        <thead>
            <tr>
                <th style="width:90px;">員編</th>
                <th style="width:160px;">帳號</th>
                <th style="width:160px;">姓名</th>
                <th style="width:220px;">角色</th>
                <th style="width:90px;">啟用</th>
                <th style="width:220px;">新密碼</th>
                <th style="width:120px;">操作</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var emp in Model)
        {
            <tr data-id="@emp.EmployeeID">
                <td>@emp.EmployeeID</td>
                <td>@emp.Account</td>
                <td>@emp.EmployeeName</td>
                <td>
                    <select class="form-select js-role">
                            @foreach (var role in roles)
                            {
                                <option value="@role.Value" selected="@(emp.RoleID.HasValue && emp.RoleID.Value.ToString() == role.Value)">
                                    @role.Text
                                </option>
                            }
                    </select>
                </td>
                <td>
                    <input type="checkbox" class="form-check-input js-status" @(emp.Status == true ? "checked" : "") />
                </td>
                <td>
                    <input type="password" class="form-control js-password" placeholder="留空不變" />
                </td>
                <td>
                        <button type="button" class="btn btn-info btn-sm js-detail">詳細</button>
                    <button type="button" class="btn btn-primary btn-sm js-save">儲存</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<!-- 只用來取 Anti-Forgery Token -->
<form id="anti-form" method="post">
    @Html.AntiForgeryToken()
</form>
<div class="modal fade" id="empDetailModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">員工詳細資料</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body"><!-- AJAX 會塞 Partial 進來 --></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        (() => {
          const table = document.getElementById("emp-table");
          if (!table) return;

          const tokenInput = document.querySelector('#anti-form input[name="__RequestVerificationToken"]');
          const token = tokenInput ? tokenInput.value : "";

          // 1) 儲存
          table.addEventListener("click", async (e) => {
            const btn = e.target.closest(".js-save");
            if (!btn) return;

            const tr = btn.closest("tr");
            const id = tr.dataset.id;
            const roleId = tr.querySelector(".js-role").value;
            const status = tr.querySelector(".js-status").checked;
            const password = tr.querySelector(".js-password").value;

            const form = new FormData();
            form.append("id", id);
            form.append("roleId", roleId);
            form.append("status", status ? "true" : "false");
            if (password && password.trim().length > 0) form.append("password", password);
            if (token) form.append("__RequestVerificationToken", token);

            btn.disabled = true;
            const oldText = btn.textContent;
            btn.textContent = "儲存中…";

            try {
              const res = await fetch('@Url.Action("UpdateRow", "EmployeeAuth", new { area = "Employee" })', {
                method: "POST",
                body: form,
                headers: { "X-Requested-With": "XMLHttpRequest" }
              });
              if (!res.ok) throw new Error("HTTP " + res.status);
              const data = await res.json();
              if (data.ok) {
                alert("更新成功");
                tr.querySelector(".js-password").value = "";
              } else {
                alert("更新失敗：" + (data.message || "請稍後再試"));
              }
            } catch (err) {
              alert("發生錯誤：" + err.message);
            } finally {
              btn.disabled = false;
              btn.textContent = oldText;
            }
          });

          // 2) 詳細
          table.addEventListener("click", async (e) => {
            const btn = e.target.closest(".js-detail");
            if (!btn) return;

            const tr = btn.closest("tr");
            const id = tr.dataset.id;

            btn.disabled = true;
            const old = btn.textContent;
            btn.textContent = "載入中…";

            try {
              const res = await fetch('@Url.Action("Detail", "EmployeeAuth", new { area = "Employee" })' + `?id=${id}`, {
                method: "GET",
                headers: { "X-Requested-With": "XMLHttpRequest" }
              });
              if (!res.ok) throw new Error("HTTP " + res.status);

              const html = await res.text();
              document.querySelector("#empDetailModal .modal-body").innerHTML = html;

              if (!window.bootstrap || !bootstrap.Modal) {
                console.error("Bootstrap JS 未載入");
                alert("Modal 需要載入 Bootstrap JS（bundle）");
                return;
              }
              new bootstrap.Modal(document.getElementById('empDetailModal')).show();
            } catch (err) {
              alert("載入失敗：" + err.message);
            } finally {
              btn.disabled = false;
              btn.textContent = old;
            }
          });
        })();
                document.getElementById("btn-save-all").addEventListener("click", async () => {
            const buttons = document.querySelectorAll("#emp-table .js-save");
            const results = [];

            let index = 1; // 用來標記第 n 筆

            for (const btn of buttons) {
                const tr = btn.closest("tr");
                const id = tr.dataset.id;
                const roleId = tr.querySelector(".js-role").value;
                const status = tr.querySelector(".js-status").checked;
                const password = tr.querySelector(".js-password").value;

                const form = new FormData();
                form.append("id", id);
                form.append("roleId", roleId);
                form.append("status", status ? "true" : "false");
                if (password && password.trim().length > 0) form.append("password", password);
                const token = document.querySelector('#anti-form input[name="__RequestVerificationToken"]').value;
                if (token) form.append("__RequestVerificationToken", token);

                try {
                    const res = await fetch('@Url.Action("UpdateRow", "EmployeeAuth", new { area = "Employee" })', {
                        method: "POST",
                        body: form,
                        headers: { "X-Requested-With": "XMLHttpRequest" }
                    });
                    const data = await res.json();
                    if (data.ok) {
                        results.push(`第 ${index} 筆資料 (員工ID=${id}) ✅ 更新成功`);
                        tr.querySelector(".js-password").value = "";
                    } else {
                        results.push(`第 ${index} 筆資料 (員工ID=${id}) ❌ 更新失敗: ${data.message || "未知錯誤"}`);
                    }
                } catch (err) {
                    results.push(`第 ${index} 筆資料 (員工ID=${id}) ❌ 發生錯誤: ${err.message}`);
                }

                index++;
                await new Promise(r => setTimeout(r, 200)); // 避免同時打太多請求
            }

            alert(results.join("\n"));
        });
    </script>

}