@using System
@model IEnumerable<Cat_Paw_Footprint.Models.CustomerOrders>

@{
    ViewData["Title"] = "訂單一覽";   
}

<h1 class="h4 mb-0">行程 / 地點</h1><br />
<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="btn-group" role="group" aria-label="view switch">
		<div class="col-auto">
            <input id="globalSearch" type="search" class="form-control" placeholder="搜尋：訂單編號・客戶・商品">
		</div>
		<div class="col-auto">
			<button id="btnClearSearch" type="button" class="btn btn-outline-secondary">清除</button>
		</div>
		<div class="col-auto text-muted">
			<small id="searchResultHint"></small>
		</div>
	</div> 
    <div class="card mb-3">
        <div class="card-body">
            <form method="get" action="@Url.Action("Export", "CustomerOrders", new { area = "Order" })" class="row g-2 align-items-end">
                <div class="col-auto">
                    <label class="form-label mb-1">開始日期</label>
                    <input type="date" name="start" class="form-control" />
                </div>
                <div class="col-auto">
                    <label class="form-label mb-1">結束日期</label>
                    <input type="date" name="end" class="form-control" />
                </div>
                <div class="col-auto">
                    <button type="submit" class="btn btn-success">
                        下載 Excel
                    </button>
                </div>
                <div class="col-auto">
                    <small class="text-muted">（不填表示不限制）</small>
                </div>
            </form>
        </div>
    </div>
    <div class="btn-group" role="group" aria-label="view switch">
        <button id="btnViewCard" type="button" class="btn btn-outline-secondary">圖卡</button>
        <button id="btnViewTable" type="button" class="btn btn-outline-secondary">表單</button>
    </div>
</div>
<style>
    .th-sort {
        cursor: pointer;
        user-select: none;
    }

        .th-sort[aria-sort="ascending"]::after {
            content: " ▲";
            font-size: .8em;
        }

        .th-sort[aria-sort="descending"]::after {
            content: " ▼";
            font-size: .8em;
        }
</style>
@{
    var groups = Model
        .Where(o => o.ProductID != 0)                    
        .GroupBy(o => o.ProductID)
        .Select(g => new
        {
            ProductID = g.Key,
            Name = g.First().Product?.ProductName ?? $"商品 {g.Key}",                     
            ImageUrl = g.First().Product?.ProductImage != null? "data:image/png;base64," + Convert.ToBase64String(g.First().Product.ProductImage) : $"https://placehold.co/600x400?text=Noimage",
            OrderCount = g.Count()
        })
        .OrderBy(x => x.ProductID)
        .ToList();    
}

@if (!groups.Any())
{
    <div class="alert alert-info">目前尚無訂單資料；請先建立商品並新增訂單。</div>
}
else
{
    <!-- 卡片視圖 -->
    <div id="viewCards">
        <div class="row g-3">
            @foreach (var p in groups)
            {
                <div class="col-12 col-sm-6 col-md-4 col-xl-3 product-card" data-productname="@p.Name">
                    <div class="card h-100 shadow-sm">
                        <img src="@p.ImageUrl" class="card-img-top" alt="@p.Name" style="height:180px;object-fit:cover">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5 class="card-title mb-0">@p.Name</h5>
                                <span class="badge text-bg-light">@($"{p.OrderCount} 筆")</span>
                            </div>
                            <button type="button"
                                    class="btn btn-primary mt-auto btn-open-orders"
                                    data-productid="@p.ProductID"
                                    data-productname="@p.Name"									
                                    data-bs-toggle="modal"
                                    data-bs-target="#ordersModal">
                                查看訂單
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- 表格視圖（逐筆訂單；預設隱藏） -->
<div id="viewTable" class="d-none">
  <div class="table-responsive">
    <table id="ordersTable" class="table table-hover align-middle">
        <thead class="table-light">
        <tr>
            <th data-sort="ordercode" class="th-sort">訂單編號</th>
            <th data-sort="totalamount" class="th-sort text-end">總金額</th>
            <th data-sort="createtime" class="th-sort">建立時間</th>
            <th data-sort="updatetime" class="th-sort">更新時間</th>
            <th data-sort="customer" class="th-sort">客戶</th>
            <th data-sort="status" class="th-sort">狀態</th>
            <th data-sort="product" class="th-sort">商品</th>
            <th style="width:140px">操作</th>
        </tr>
      </thead>
      <tbody id="ordersTableBody">
        @foreach (var o in Model.OrderByDescending(x => x.CreateTime))
        {						
            var orderCode = "ORD-" + (o.CreateTime.HasValue ? o.CreateTime.Value.ToString("yyyyMMdd-HHmmss") : "NA") + "-" + o.OrderID;
            var statusText = o.OrderStatus?.StatusDesc ?? "";
            var statusClass = statusText == "已付款" ? "bg-success"
                             : statusText == "未付款" ? "bg-warning"
                             : statusText == "已取消" ? "bg-secondary"
                             : "bg-danger";
            var custName = o.CustomerProfile?.CustomerName ?? o.CustomerID.ToString();
            var prodName = o.Product?.ProductName ?? o.ProductID.ToString();
            var amt = o.TotalAmount ?? 0;
            var ct = o.CreateTime?.ToString("s") ?? "";  
            var ut = o.UpdateTime?.ToString("s") ?? "";
            <tr data-id="@o.OrderID"
                data-ordercode="@orderCode"
                data-customer="@custName"
                data-product="@prodName"
                data-status="@statusText"
                data-amount="@amt"
                data-createtime="@ct"
                data-updatetime="@ut">
            <td class="font-monospace">@orderCode</td>
            <td class="text-end">@($"NT$ {(o.TotalAmount ?? 0):N0}")</td>
            <td>@o.CreateTime?.ToString("yyyy/MM/dd HH:mm")</td>
            <td>@o.UpdateTime?.ToString("yyyy/MM/dd HH:mm")</td>
            <td>@(o.CustomerProfile?.CustomerName ?? o.CustomerID.ToString())</td>
            <td><span class="badge @statusClass">@statusText</span></td>
            <td>@(o.Product?.ProductName ?? o.ProductID.ToString())</td>
            <td class="d-flex gap-2">
								<button type="button" class="btn btn-sm btn-primary btn-action" data-action="edit" data-id="@o.OrderID">編輯</button>
                <button type="button" class="btn btn-sm btn-success btn-mail" data-id="@o.OrderID" data-email="@(o.CustomerProfile?.Email ?? "")">寄信</button>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</div>
}
<div class="modal fade" id="ordersModal" tabindex="-1" aria-labelledby="ordersModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <div>
                    <h5 class="modal-title" id="ordersModalLabel">訂單 — <span id="m_product_name"></span></h5>
                    <small class="text-muted" id="m_summary"></small>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="關閉"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table table-sm table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>訂單編號</th>
                                <th>總金額</th>
                                <th>建立時間</th>
                                <th>更新時間</th>
                                <th>客戶</th>
                                <th>狀態</th>
                                <th>商品</th>
                                <th style="width:80px">操作</th>
                            </tr>
                        </thead>
                        <tbody id="m_tbody">
                            <tr><td colspan="8" class="text-center py-4 text-muted">尚無資料</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <small class="text-muted" id="m_updated"></small>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="editOrderModal" tabindex="-1" aria-labelledby="editOrderLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="editOrderLabel" class="modal-title">編輯訂單</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="關閉"></button>
            </div>

            <form id="editOrderForm" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" name="OrderID" id="e_OrderID" />

                    <div class="mb-3">
                        <label class="form-label">客戶ID</label>
                        <input type="number" class="form-control" name="CustomerID" id="e_CustomerID" readonly/>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">商品ID</label>
                        <input type="number" class="form-control" name="ProductID" id="e_ProductID" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">狀態</label>
                        <select class="form-select" name="OrderStatusID" id="e_OrderStatusID">
                            <option value="1">已付款</option>
                            <option value="2">未付款</option>
                            <option value="3">已取消</option>
                            <option value="4">錯誤</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">總金額</label>
                        <input type="number" class="form-control" name="TotalAmount" id="e_TotalAmount" min="0" autofocus/>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">建立時間</label>
                        <input type="datetime-local" class="form-control" name="CreateTime" id="e_CreateTime" readonly />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">更新時間</label>
                        <input type="datetime-local" class="form-control" name="UpdateTime" id="e_UpdateTime" readonly />
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="submit" class="btn btn-primary">儲存</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- 寄信彈窗 -->
<div class="modal fade" id="mailModal" tabindex="-1" aria-labelledby="mailModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="mailModalLabel" class="modal-title">寄信給客戶</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="關閉"></button>
            </div>

            <form id="sendMailForm" method="post" action="@Url.Action("SendAjax","Mail", new { area = "Order" })">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label" for="mail_to">收件者</label>
                        <input type="email" class="form-control" id="mail_to" name="to" placeholder="customer@example.com" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label" for="mail_subject">主旨</label>
                        <input type="text" class="form-control" id="mail_subject" name="subject" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label" for="mail_body">內容</label>
                        <textarea class="form-control" id="mail_body" name="body" rows="6" placeholder="輸入郵件內容…" required></textarea>
                    </div>
                    <div id="mail_hint" class="small text-muted"></div>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">送出</button>
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">取消</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const byProdBase  = '@Url.Action("ByProduct", "CustomerOrders", new { area = "Order" })';
        const getApiBase  = '@Url.Action("Get", "CustomerOrders", new { area = "Order" })'; 
        const tbody = document.getElementById('m_tbody');
        const mProdName = document.getElementById('m_product_name');
        const mSummary = document.getElementById('m_summary');
        const mUpdated = document.getElementById('m_updated');
        const mailAjaxUrl = '@Url.Action("SendAjax", "Mail", new { area = "Order" })';



        function getStatusClass(status) {
          switch (status) {
            case "已付款": return "bg-success";   
            case "未付款": return "bg-warning";
            case "已取消":   return "bg-secondary";
            case "錯誤":   return "bg-danger";
            default:       return "bg-secondary"; 
          }
        }

        function fmt(v) {
          if (!v) return '';
          const d = new Date(v);
          if (isNaN(d.getTime())) return v;
          return d.toLocaleString('zh-TW');
        }

        function toLocalInput(dt) {
          if (!dt) return "";
          const d = new Date(dt);
          if (isNaN(d.getTime())) return "";
          const pad = n => n.toString().padStart(2, '0');
          const s = `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}`;
          return s;
        }

        function toLocal(dt) {
          if (!dt) return "";
          const d = new Date(dt);
          return isNaN(d.getTime()) ? dt : d.toLocaleString('zh-TW');
        }
        //圖卡編輯
        tbody?.addEventListener('click', async (e) => {
          const btn = e.target.closest('.btn-edit');
          if (!btn) return;

          const id = btn.dataset.id;
          const res = await fetch(`${getApiBase}/${id}`);
          if (!res.ok) { alert('讀取訂單失敗'); return; }
          const o = await res.json();

          document.getElementById('e_OrderID').value       = o.id;
          document.getElementById('e_CustomerID').value    = o.customerId ?? '';
          document.getElementById('e_ProductID').value     = o.productId ?? '';
          document.getElementById('e_OrderStatusID').value = o.orderStatusId ?? 1;
          document.getElementById('e_TotalAmount').value   = o.totalAmount ?? 0;
          document.getElementById('e_CreateTime').value    = toLocalInput(o.createTime);
          document.getElementById('e_UpdateTime').value    = toLocalInput(o.updateTime);

          const form = document.getElementById('editOrderForm');
          form.setAttribute('action', '@Url.Action("Edit", "CustomerOrders", new { area = "Order" })' + '/' + id);

          const ordersEl = document.getElementById('ordersModal');
          const editEl   = document.getElementById('editOrderModal');

          const ordersMD = ordersEl ? bootstrap.Modal.getOrCreateInstance(ordersEl) : null;
          const editMD   = editEl   ? bootstrap.Modal.getOrCreateInstance(editEl)   : null;

          if (!editMD) { alert('找不到編輯視窗'); return; }

          ordersMD?.hide();

          requestAnimationFrame(() => {
            cleanupBackdrops();
            editMD.show();
          });
        });
        
        document.querySelectorAll('.btn-open-orders').forEach(btn => {
          btn.addEventListener('click', async () => {
            const productId = btn.dataset.productid;
            const productName = btn.dataset.productname;
            mProdName.textContent = productName;
            tbody.innerHTML = '<tr><td colspan="8" class="text-center py-4 text-muted">載入中…</td></tr>';

            const res = await fetch(`/Order/CustomerOrders/by-product/${productId}`);
            const data = await res.json();

            const orders = data.orders || [];
            if (orders.length === 0) {
              tbody.innerHTML = '<tr><td colspan="8" class="text-center py-4 text-muted">這個商品尚無訂單，請先新增。</td></tr>';
            } else {
              tbody.innerHTML = '';
              orders.forEach(o => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                  <td class="font-monospace">${o.orderCode}</td>
                  <td>NT$ ${Number(o.totalAmount ?? 0).toLocaleString()}</td>
                  <td>${fmt(o.createTime)}</td>
                  <td>${fmt(o.updateTime)}</td>
                  <td>${o.customer ?? ''}</td>
                  <td><span class="badge ${getStatusClass(o.status)}">${o.status}</span></td>
                  <td>${o.product ?? ''}</td>
                  <td>
                    <button type="button" class="btn btn-sm btn-primary btn-edit" data-id="${o.id}">編輯</button>
                    <button type="button" class="btn btn-sm btn-success btn-mail" data-id="${o.id}" data-email="${o.customerEmail ?? ''}">寄信</button>
                  </td>
                `;
                tbody.appendChild(tr);
              });
            }

            mSummary.textContent = `共 ${orders.length} 筆｜總金額 NT$ ${Number(data?.kpi?.totalAmount ?? 0).toLocaleString()}`;
            mUpdated.textContent = `更新時間：${new Date().toLocaleString('zh-TW')}`;
          });
        });
        //圖卡寄信
        tbody?.addEventListener('click', async (e) => {
          const mailBtn = e.target.closest('.btn-mail');
          if (!mailBtn) return;

          const id = mailBtn.dataset.id;

          // 先抓訂單資料，拿到 email、orderCode 等
          const res = await fetch(`${getApiBase}/${id}`);
          if (!res.ok) { alert('讀取訂單失敗'); return; }
          const o = await res.json();

          // 假如 ByProduct/Get 沒回傳 email，請在 ByProduct 的 Select/ Get 的 Ok(...) 補上 customerEmail 欄位
          // 這裡用備援：若沒有 email，就留空讓你手動輸入
          const to   = o.customerEmail ?? '';
          const code = o.orderCode ?? `#${o.orderCode}`;

          // 預設主旨 / 內容（你可自行改模板）
          const subject = `【訂單通知】${code}`;
          const body    =
        `親愛的客戶您好，

        這是關於您的訂單 ${code} 的通知。
        目前狀態：${o.status ?? '(未提供)'}
        總金額：NT$ ${Number(o.totalAmount ?? 0).toLocaleString()}
        建立時間：${o.createTime ? new Date(o.createTime).toLocaleString('zh-TW') : ''}

        如有任何問題，歡迎回信與我們聯繫。
        貓爪足跡 敬上`;

          // 填入寄信表單
          document.getElementById('mail_to').value      = to;
          document.getElementById('mail_subject').value = subject;
          document.getElementById('mail_body').value    = body;
          document.getElementById('mail_hint').textContent = `訂單：${code}`;

          // 關閉「查看訂單」，打開「寄信」
          const ordersEl = document.getElementById('ordersModal');
          const mailEl   = document.getElementById('mailModal');
          const ordersMD = ordersEl ? bootstrap.Modal.getOrCreateInstance(ordersEl) : null;
          const mailMD   = mailEl   ? bootstrap.Modal.getOrCreateInstance(mailEl)   : null;

          if (!mailMD) { alert('找不到寄信視窗'); return; }

          ordersMD?.hide();
          ordersEl?.addEventListener('hidden.bs.modal', () => {
            // 清理殘留 backdrop，再開寄信
            document.querySelectorAll('.modal-backdrop').forEach(b => b.remove());
            document.body.classList.remove('modal-open');
            document.body.style.removeProperty('padding-right');
            mailMD.show();
          }, { once:true });

          // 寄信關閉後回到查看訂單（可要可不要）
          mailEl?.addEventListener('hidden.bs.modal', () => {
            document.querySelectorAll('.modal-backdrop').forEach(b => b.remove());
            document.body.classList.remove('modal-open');
            document.body.style.removeProperty('padding-right');
            ordersMD?.show();
          }, { once:true });
        });
        
        document.getElementById('sendMailForm')?.addEventListener('submit', async (ev) => {
          ev.preventDefault();
          const form = ev.currentTarget;
          const fd   = new FormData(form);

          try{
            const res = await fetch(form.action || mailAjaxUrl, {
              method: 'POST',
              body: fd
            });
            const ok = res.ok;
            if (!ok) {
              const json = await res.json().catch(()=>null);
              alert('寄送失敗：' + (json?.error || res.status));
              return;
            }
            // 關閉寄信視窗
            const mailEl = document.getElementById('mailModal');
            const mailMD = mailEl ? bootstrap.Modal.getOrCreateInstance(mailEl) : null;
            mailMD?.hide();

            // 提示一下
            setTimeout(()=> alert('郵件已送出！'), 100);
          }catch(err){
            console.error(err);
            alert('寄送失敗（例外）');
          }
        });
        //表單編輯
        document.getElementById('ordersTableBody')?.addEventListener('click', async (e) => {
          const btn = e.target.closest('.btn-action[data-action="edit"]');
          if (!btn) return;

          const id = btn.dataset.id;
          const res = await fetch(`${getApiBase}/${id}`);
          if (!res.ok) { alert('讀取訂單失敗'); return; }
          const o = await res.json();

          document.getElementById('e_OrderID').value       = o.id;
          document.getElementById('e_CustomerID').value    = o.customerId ?? '';
          document.getElementById('e_ProductID').value     = o.productId ?? '';
          document.getElementById('e_OrderStatusID').value = o.orderStatusId ?? 1;
          document.getElementById('e_TotalAmount').value   = o.totalAmount ?? 0;
          document.getElementById('e_CreateTime').value    = toLocalInput(o.createTime);
          document.getElementById('e_UpdateTime').value    = toLocalInput(o.updateTime);

          const form = document.getElementById('editOrderForm');
          form.setAttribute('action', '@Url.Action("Edit", "CustomerOrders", new { area = "Order" })' + '/' + id);

          const editMD = bootstrap.Modal.getOrCreateInstance(document.getElementById('editOrderModal'));
          editMD.show();
        });
        //表單寄信
        document.getElementById('ordersTableBody')?.addEventListener('click', async (e) => {
          const btn = e.target.closest('.btn-mail');
          if (!btn) return;

          const id = btn.dataset.id;
          const email = btn.dataset.email || '';
          const res = await fetch(`${getApiBase}/${id}`);
          if (!res.ok) { alert('讀取訂單失敗'); return; }
          const o = await res.json();

          const to   = email || o.customerEmail || '';
          const code = o.orderCode ?? `#${o.orderCode}`;
          document.getElementById('mail_to').value      = to;
          document.getElementById('mail_subject').value = `【訂單通知】${code}`;
          document.getElementById('mail_body').value    = `親愛的客戶您好，

        這是關於您的訂單 ${code} 的通知。
        目前狀態：${o.status ?? '(未提供)'}
        總金額：NT$ ${Number(o.totalAmount ?? 0).toLocaleString()}
        建立時間：${o.createTime ? new Date(o.createTime).toLocaleString('zh-TW') : ''}

        如有任何問題，歡迎回信與我們聯繫。
        貓爪足跡 敬上`;
          document.getElementById('mail_hint').textContent = `訂單：${code}`;

          const mailMD = bootstrap.Modal.getOrCreateInstance(document.getElementById('mailModal'));
          mailMD.show();
        });

        function cleanupBackdrops(){
          document.querySelectorAll('.modal-backdrop').forEach(b => b.remove());
          document.body.classList.remove('modal-open');
          document.body.style.removeProperty('padding-right');
        } 
        
        //搜尋功能
       
        (function(){
            const box   = document.getElementById('globalSearch');
            const clear = document.getElementById('btnClearGlobalSearch');
            const hint  = document.getElementById('globalSearchHint');

            const viewCards = document.getElementById('viewCards');   // 卡片容器
            const viewTable = document.getElementById('viewTable');   // 表格容器
            const tbody     = document.getElementById('ordersTableBody');

            if (!box) return;

            const norm = s => (s ?? '').toString().trim().toLowerCase();
            const cards = () => Array.from(document.querySelectorAll('.product-card'));
            const rows  = () => Array.from(tbody?.querySelectorAll('tr') || []);

            function isCardsMode(){
            // 視你的切換實作而定：這裡以 .d-none 判斷
            return viewCards && !viewCards.classList.contains('d-none');
            }

            function applyForCards(q){
            let visible = 0;
            cards().forEach(card=>{
                const productName = norm(card.dataset.productname || card.querySelector('.card-title')?.textContent);
                const hit = !q || productName.includes(q);
                card.style.display = hit ? '' : 'none';
                if (hit) visible++;
            });
            setHint(q, `符合「${box.value}」的商品：${visible} 項`);
            }

            function applyForTable(q){
            let visible = 0;
            rows().forEach(tr=>{
                const code = norm(tr.dataset.ordercode);
                const cust = norm(tr.dataset.customer);
                const prod = norm(tr.dataset.product);
                const hit = !q || code.includes(q) || cust.includes(q) || prod.includes(q);
                tr.style.display = hit ? '' : 'none';
                if (hit) visible++;
            });
            setHint(q, `符合「${box.value}」的訂單：${visible} 筆`);
            }

            function setHint(q, text){
            if (!hint) return;
            hint.textContent = q ? text : '';
            }

            function applyGlobal(){
            const q = norm(box.value);
            if (isCardsMode()) applyForCards(q);
            else               applyForTable(q);
            }

            // 綁事件
            box.addEventListener('input', applyGlobal);
            clear?.addEventListener('click', ()=>{
            box.value = '';
            applyGlobal();
            box.focus();
            });

            // 如果你有視圖切換按鈕（例如 #btnViewCard / #btnViewTable），切換時要重跑一次
            document.getElementById('btnViewCard') ?.addEventListener('click', applyGlobal);
            document.getElementById('btnViewTable')?.addEventListener('click', applyGlobal);

            // 初次套用
            applyGlobal();
        })();


        
        (function setupViewSwitch(){
          const btnCard  = document.getElementById('btnViewCard');
          const btnTable = document.getElementById('btnViewTable');
          const viewCards = document.getElementById('viewCards');
          const viewTable = document.getElementById('viewTable');

          // 從 localStorage 還原上次選擇
          const key = 'ordersProductView';
          const saved = localStorage.getItem(key) || 'card';
          applyView(saved);

          btnCard?.addEventListener('click', ()=> applyView('card'));
          btnTable?.addEventListener('click', ()=> applyView('table'));

          function applyView(v){
            if(v==='table'){
              viewCards?.classList.add('d-none');
              viewTable?.classList.remove('d-none');
              btnTable?.classList.add('active');
              btnCard?.classList.remove('active');
              localStorage.setItem(key,'table');
            }else{
              viewTable?.classList.add('d-none');
              viewCards?.classList.remove('d-none');
              btnCard?.classList.add('active');
              btnTable?.classList.remove('active');
              localStorage.setItem(key,'card');
            }
          }
        })();
                (function(){
          const table = document.getElementById('ordersTable');
          const tbody = document.getElementById('ordersTableBody');
          const ths   = table?.querySelectorAll('thead th[data-sort]');
          if (!table || !tbody || !ths?.length) return;

          const collator = new Intl.Collator('zh-Hant', { numeric: true, sensitivity: 'base' });
          let state = { key: null, dir: 1 }; // 1: asc, -1: desc

          const getters = {
            ordercode  : tr => tr.dataset.ordercode || '',
            totalamount: tr => Number(tr.dataset.amount || '0'),
            createtime : tr => Date.parse(tr.dataset.createtime || '') || 0,
            updatetime : tr => Date.parse(tr.dataset.updatetime || '') || 0,
            customer   : tr => tr.dataset.customer || '',
            status     : tr => tr.dataset.status || '',
            product    : tr => tr.dataset.product || ''
          };

          function sortBy(key){
            const rows = Array.from(tbody.querySelectorAll('tr'));
            const get  = getters[key] || (tr => tr.textContent || '');
            const dir  = (state.key === key) ? -state.dir : 1; // 同欄再點切換方向
            state = { key, dir };

            rows.sort((a,b)=>{
              const va = get(a), vb = get(b);
              if (typeof va === 'number' && typeof vb === 'number') {
                return (va - vb) * dir;
              }
              // 文字/日期統一字串比較（日期已轉數字在上面處理）
              return collator.compare(String(va), String(vb)) * dir;
            });

            // 重新插回 DOM
            const frag = document.createDocumentFragment();
            rows.forEach(r => frag.appendChild(r));
            tbody.appendChild(frag);

            // 更新表頭指示
            ths.forEach(th => th.removeAttribute('aria-sort'));
            const active = Array.from(ths).find(th => th.dataset.sort === key);
            if (active) active.setAttribute('aria-sort', dir === 1 ? 'ascending' : 'descending');
          }

          // 綁事件（點擊與鍵盤）
          ths.forEach(th=>{
            th.tabIndex = 0;
            th.addEventListener('click',    () => sortBy(th.dataset.sort));
            th.addEventListener('keydown',  e => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); sortBy(th.dataset.sort); }});
          });
        })();
</script>

}