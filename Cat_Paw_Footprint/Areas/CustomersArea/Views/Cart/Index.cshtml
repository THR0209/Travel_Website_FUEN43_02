@{
    ViewData["Title"] = "購物車";
}
<div class="container py-4" id="cartApp" v-cloak>
    <h2 class="mb-3">購物車</h2>

    <div class="mb-3 d-flex gap-2">
        <input v-model.number="customerId" type="number" class="form-control w-auto" placeholder="CustomerID (測試)">
        <button class="btn btn-outline-secondary" v-on:click="reload">重新整理</button>
        <button class="btn btn-outline-primary" v-on:click="addDemo">加一個範例商品</button>
    </div>

    <div v-if="items.length===0" class="alert alert-info">購物車是空的</div>

    <div v-else class="table-responsive">
        <table class="table align-middle">
            <thead class="table-light">
                <tr>
                    <th style="width:36px"><input type="checkbox" v-model="checkAll" v-on:change="toggleAll"></th>
                    <th>商品</th>
                    <th class="text-end">單價</th>
                    <th class="text-center">數量</th>
                    <th class="text-end">小計</th>
                    <th style="width:100px"></th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="it in items" :key="it.productId">
                    <td><input type="checkbox" v-model="selected" :value="it.productId"></td>
                    <td class="d-flex align-items-center gap-2">
                        <img :src="it.imageUrl" alt="" style="width:60px;height:60px;object-fit:contain;background:#f8f9fa" />
                        <div>{{ it.productName }}</div>
                    </td>
                    <td class="text-end">NT$ {{ it.price.toLocaleString() }}</td>
                    <td class="text-center">
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-secondary" v-on:click="dec(it)">−</button>
                            <input type="number" class="form-control form-control-sm w-auto text-center"
                                   v-model.number="it.qty" min="1" v-on:change="update(it)">
                            <button class="btn btn-outline-secondary" v-on:click="inc(it)">＋</button>
                        </div>
                    </td>
                    <td class="text-end">NT$ {{ (it.price * it.qty).toLocaleString() }}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-danger" v-on:click="remove(it.productId)">移除</button>
                    </td>
                </tr>
            </tbody>

            <tfoot>
                <tr>
                    <th colspan="3" class="text-end">總計</th>
                    <th class="text-end">NT$ {{ total.toLocaleString() }}</th>
                    <th></th>
                </tr>
            </tfoot>
        </table>
    </div>

    <div class="d-flex gap-2">
        <button class="btn btn-outline-secondary" v-on:click="clearCart" :disabled="items.length===0">清空</button>
        <form id="payForm" method="post" action="/CustomersArea/Payment/Create">
            <input type="hidden" name="orderId" :value="selectedOrderId">
            <div class="d-flex gap-2">
                <button class="btn btn-primary" v-on:click="payByCredit" :disabled="items.length===0">信用卡付款</button>
                <button class="btn btn-outline-primary" v-on:click="payByTransfer" :disabled="items.length===0">轉帳匯款</button>
            </div>
        </form>
    </div>
    <div class="d-flex flex-wrap gap-2 align-items-center my-3">
        <div class="input-group w-auto">
            <span class="input-group-text">折價券</span>
            <input v-model.trim="couponCode" class="form-control" placeholder="輸入折價碼…">
            <button class="btn btn-outline-primary" v-on:click="applyCoupon" :disabled="!couponCode">套用</button>
            <button class="btn btn-outline-secondary" v-on:click="clearCoupon" :disabled="!couponCode">清除</button>
        </div>
        <button class="btn btn-outline-danger ms-auto" :disabled="selected.length===0" v-on:click="batchRemove">刪除選取</button>
    </div>

    <footer class="card shadow-sm sticky-bottom p-3 bg-white border">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <div class="small text-muted" v-if="discountHint">{{ discountHint }}</div>
            </div>
            <div class="fs-5">
                合計：<strong>NT$ {{ finalTotal.toLocaleString() }}</strong>
            </div>
        </div>
    </footer>

</div>
<script>console.log('Scripts section loaded ✅');</script>
@section Scripts {
    <style>
        [v-cloak] {
            display: none
        }</style>
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios@1/dist/axios.min.js"></script>
    <script>
        (() => {
            const { createApp, ref, onMounted, computed } = Vue;

            createApp({
              setup(){
                const customerId = ref(0); // 先用輸入測試，未接登入前暫用
                const items = ref([]);
                const total = ref(0);
                const couponCode = ref('');
                const discountHint = ref('');
                const selected = ref([]);
                const checkAll = ref(false);

                async function addDemo(){
                  try{
                    const fp = await axios.get('/CustomersArea/Cart/first-product-id');
                    const pid = fp.data?.productId;
                    if (!pid) { alert('找不到任何商品'); return; }

                    await axios.post('/CustomersArea/Cart/add',
                      new URLSearchParams({ productId: pid, qty: 1 })
                    );
                    await reload();
                  }catch(err){
                    console.error(err);
                    alert('加入範例商品失敗：' + (err?.response?.status || ''));
                  }
                }

                async function payByTransfer(){
                  const customerId = 123; // 之後改登入者ID
                  // A) 先建訂單（未付款）
                  await axios.post('/CustomersArea/Cart/checkout', new URLSearchParams({ customerId }));

                  // B) 寄信（匯款帳號）
                  await axios.post('/CustomersArea/Payment/Transfer', new URLSearchParams({ customerId }));

                  alert('已寄出匯款資訊，請於期限內完成轉帳。');
                  window.location.href = '/CustomersArea/Orders';
                }

                async function payByCredit(){
                  // 這裡 demo 用測試 customerId，之後請改成登入者ID
                  const customerId = 123;
                  // 後端會 Redirect 到 /CustomersArea/Payment/Create → GoECPay 自動送出
                  const form = document.createElement('form');
                  form.method = 'post';
                  form.action = '/CustomersArea/Payment/CheckoutCredit';
                  form.innerHTML = `<input name="customerId" value="${customerId}">`;
                  document.body.appendChild(form);
                  form.submit();
                }

                async function checkout(){
                  try{
                    const res = await axios.post('/CustomersArea/Cart/checkout', new URLSearchParams({
                      customerId: customerId.value   // 若你已經改成從登入取，就移除此欄位
                    }));
                    const orderIds = res.data?.orderIds || [];
                    if(orderIds.length === 0){
                      alert('已建立訂單，但未取得訂單編號');
                      return;
                    }

                    // 方式 1：直接建立 form 送到 Payment/Create（建議）
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/CustomersArea/Payment/Create';

                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'orderId';
                    input.value = orderIds[0]; // 只拿第一筆去付款
                    form.appendChild(input);

                    document.body.appendChild(form);
                    form.submit();

                    // 方式 2：若你還是想先回到「我的訂單」頁，就改成下面這行
                    // window.location.href = '/CustomersArea/Orders';
                  }catch(e){
                    console.error(e);
                    alert('結帳失敗：' + (e.response?.data?.error || ''));
                  }
                }

                async function reload(){
                  const { data } = await axios.get('/CustomersArea/Cart/api');
                  items.value = data.items || [];
                  total.value = data.total || 0;
                  // 回填折扣資訊（若後端有保存在 Session）
                  couponCode.value = data.coupon?.code || '';
                  discountHint.value = data.coupon?.hint || '';
                }
                function inc(it){ it.qty++; update(it); }
                function dec(it){ it.qty = Math.max(1, (it.qty || 1)-1); update(it); }

                async function update(it){
                  await axios.post('/CustomersArea/Cart/update', new URLSearchParams({
                    productId: it.productId, qty: it.qty
                  }));
                  await reload();
                }

                async function remove(productId){
                  await axios.post('/CustomersArea/Cart/remove', new URLSearchParams({ productId }));
                  await reload();
                }

                function toggleAll(){
                  selected.value = checkAll.value ? items.value.map(i=>i.productId) : [];
                }

                async function batchRemove(){
                  await axios.post('/CustomersArea/Cart/batch-remove', selected.value);
                  selected.value = [];
                  checkAll.value = false;
                  await reload();
                }

                async function applyCoupon(){
                  const res = await axios.post('/CustomersArea/Cart/apply-coupon', new URLSearchParams({ code: couponCode.value }));
                  discountHint.value = res.data?.hint || '';
                  await reload();
                }

                async function clearCoupon(){
                  await axios.post('/CustomersArea/Cart/clear-coupon');
                  couponCode.value = '';
                  discountHint.value = '';
                  await reload();
                }

                const discount = computed(()=> {
                  // 也可由後端計算後回傳；這裡前端先顯示，後端仍以自己計算為準
                  // 例：後端會把折扣放在 api 回傳資料 data.coupon，前端只顯示
                  return 0;
                });
                const finalTotal = computed(()=> Math.max(0, total.value - discount.value));

                onMounted(reload);

                return {
                  items, total, couponCode, discountHint,
                  selected, checkAll, toggleAll, batchRemove,
                  inc, dec, update, remove,
                  applyCoupon, clearCoupon,checkout,
                        finalTotal,addDemo,customerId,payByCredit,payByTransfer
                };
              }
            }).mount('#cartApp');
        })();
    </script>
}
